/*
 * @ (#) ManhinhQuanLyChuyenTau.java    1.0 10/20/2025
 *
 * Copyright (c) 2025 IUH. All rights reserved.
 */
package gui.Panel;

/*
 * @description
 *@author: Viet Hung
 *@date: 10/20/2025
 *@version:  1.0
 */

// [TH√äM] Import cho JDateChooser (c·∫ßn c√≥ th∆∞ vi·ªán jcalendar.jar)
import com.toedter.calendar.JDateChooser;

// [TH√äM] Import cho SQL v√† c√°c th√†nh ph·∫ßn Swing m·ªõi
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.text.SimpleDateFormat;

// [TH√äM] Import l·ªõp k·∫øt n·ªëi c·ªßa b·∫°n
import database.ConnectDB;


/**
 * L·ªõp n√†y t·∫°o giao di·ªán Qu·∫£n l√Ω Chuy·∫øn T√†u.
 * ƒê√É N√ÇNG C·∫§P: K·∫øt n·ªëi CSDL, d√πng JComboBox, JDateChooser, JSpinner.
 * ƒê√£ TH√äM ƒë·∫ßy ƒë·ªß s·ª± ki·ªán ƒëi·ªÅu h∆∞·ªõng (navigation).
 */
public class ManhinhQuanLyChuyenTau extends JFrame {

    // =================================================================================
    // C√ÅC M√ÄU S·∫ÆC V√Ä FONT
    // =================================================================================
    private static final Color PRIMARY_COLOR = new Color(0, 120, 215);
    private static final Color SELECTED_COLOR = new Color(0, 51, 102);
    private static final Color BG_COLOR = new Color(245, 245, 245);

    // Font ch·ªØ
    private static final Font FONT_BOLD_14 = new Font("Segoe UI", Font.BOLD, 14);
    private static final Font FONT_PLAIN_14 = new Font("Segoe UI", Font.PLAIN, 14); // ƒê√£ th√™m
    private static final Font FONT_TITLE = new Font("Segoe UI", Font.BOLD, 28);

    // [M·ªöI] Khai b√°o c√°c component ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ c√°c h√†m kh√°c
    private JComboBox<String> cbMaTau;
    private JComboBox<String> cbGaDi;
    private JComboBox<String> cbGaDen;
    private JDateChooser dateChooserNgayDi;
    private JSpinner timeSpinnerGioDi;


    public ManhinhQuanLyChuyenTau() {
        setTitle("Qu·∫£n l√Ω chuy·∫øn t√†u");
        setSize(1600, 900);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // 1. Panel ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i
        JPanel navPanel = createNavPanel();
        add(navPanel, BorderLayout.WEST);

        // 2. Panel n·ªôi dung (Form v√† B·∫£ng)
        JPanel contentPanel = createContentPanel();
        add(contentPanel, BorderLayout.CENTER);

        // [M·ªöI] T·∫£i d·ªØ li·ªáu t·ª´ CSDL l√™n c√°c ComboBox
        try {
            loadDuLieuMaTau();
            loadDuLieuGa();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ CSDL: " + e.getMessage(), "L·ªói CSDL", JOptionPane.ERROR_MESSAGE);
        }
    }

    // =================================================================================
    // KHU V·ª∞C MENU B√äN TR√ÅI (Gi·ªØ nguy√™n)
    // =================================================================================

    /**
     * [ƒê√É C·∫¨P NH·∫¨T] T·∫°o panel ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i.
     * M·ª•c "Qu·∫£n l√Ω chuy·∫øn t√†u" ƒë∆∞·ª£c ch·ªçn.
     * ƒê√£ th√™m ActionListeners ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng.
     */
    private JPanel createNavPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(PRIMARY_COLOR);
        panel.setPreferredSize(new Dimension(260, 0));
        panel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // --- Ph·∫ßn Header (Logo v√† ID) ---
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setBackground(PRIMARY_COLOR);
        headerPanel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel logoLabel = new JLabel("GA XE");
        logoLabel.setFont(new Font("Segoe UI", Font.BOLD, 36));
        logoLabel.setForeground(Color.WHITE);
        logoLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel idLabel = new JLabel("ID: NV200001");
        idLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        idLabel.setForeground(Color.WHITE);
        idLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        idLabel.setBorder(new EmptyBorder(5, 5, 20, 0));

        headerPanel.add(logoLabel);
        headerPanel.add(idLabel);
        headerPanel.setMaximumSize(headerPanel.getPreferredSize());
        panel.add(headerPanel);

        // --- Ph·∫ßn c√°c m·ª•c menu ---

        // [1. Trang ch·ªß]
        JButton btnTrangChu = createNavItem("Trang ch·ªß", "\uD83C\uDFE0"); // üè†
        btnTrangChu.addActionListener(e -> {
            new ManHinhDashboardQuanLy().setVisible(true);
            this.dispose();
        });
        panel.add(btnTrangChu);

        // [2. Tra c·ª©u h√≥a ƒë∆°n]
        JButton btnTraCuu = createNavItem("Tra c·ª©u h√≥a ƒë∆°n", "\uD83D\uDD0D"); // üîç
        btnTraCuu.addActionListener(e -> {
            JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng Tra c·ª©u h√≥a ƒë∆°n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.");
        });
        panel.add(btnTraCuu);

        // [3. Qu·∫£n l√Ω chuy·∫øn t√†u] - M√†n h√¨nh hi·ªán t·∫°i, kh√¥ng c·∫ßn s·ª± ki·ªán
        JButton selectedButton = createNavItem("Qu·∫£n l√Ω chuy·∫øn t√†u", "\uD83D\uDE86"); // üöÜ
        selectedButton.setBackground(SELECTED_COLOR);
        for (java.awt.event.MouseListener ml : selectedButton.getMouseListeners()) {
            selectedButton.removeMouseListener(ml);
        }
        panel.add(selectedButton);

        // [4. Qu·∫£n l√Ω t√†i kho·∫£n NV]
        JButton btnQLNV = createNavItem("Qu·∫£n l√Ω t√†i kho·∫£n NV", "\uD83D\uDC64"); // üë§
        btnQLNV.addActionListener(e -> {
            new ManHinhQuanLyNhanVien().setVisible(true);
            this.dispose();
        });
        panel.add(btnQLNV);

        // [5. Qu·∫£n l√Ω gi√° v√©]
        JButton btnQLGiaVe = createNavItem("Qu·∫£n l√Ω gi√° v√©", "\uD88D\uDCB2"); // üí≤
        btnQLGiaVe.addActionListener(e -> {
            JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng Qu·∫£n l√Ω gi√° v√© ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.");
        });
        panel.add(btnQLGiaVe);

        // [6. Qu·∫£n l√Ω khuy·∫øn m√£i]
        JButton btnQLKhuyenMai = createNavItem("Qu·∫£n l√Ω khuy·∫øn m√£i", "\uD83C\uDFF7"); // üè∑Ô∏è
        btnQLKhuyenMai.addActionListener(e -> {
            JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng Qu·∫£n l√Ω khuy·∫øn m√£i ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.");
        });
        panel.add(btnQLKhuyenMai);

        // [7. Th·ªëng k√™ b√°o c√°o]
        JButton btnThongKe = createNavItem("Th·ªëng k√™ b√°o c√°o", "\uD83D\uDCCA"); // üìä
        btnThongKe.addActionListener(e -> {
            JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng Th·ªëng k√™ b√°o c√°o ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.");
        });
        panel.add(btnThongKe);

        panel.add(Box.createVerticalGlue());

        // --- Th√™m ƒë∆∞·ªùng k·∫ª ngang ---
        JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);
        separator.setForeground(new Color(255, 255, 255, 70));
        separator.setBackground(PRIMARY_COLOR);
        separator.setMaximumSize(new Dimension(Integer.MAX_VALUE, 1));
        panel.add(separator);
        panel.add(Box.createRigidArea(new Dimension(0, 5)));

        // --- N√∫t ƒêƒÉng xu·∫•t ---
        JButton btnDangXuat = createNavItem("ƒêƒÉng xu·∫•t", "\uD83D\uDEAA"); // üö™
        btnDangXuat.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?", "X√°c nh·∫≠n ƒëƒÉng xu·∫•t", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // new ManHinhDangNhap().setVisible(true); // M·ªü l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p
                this.dispose();
            }
        });
        panel.add(btnDangXuat);

        return panel;
    }

    /**
     * [CHUNG] Ph∆∞∆°ng th·ª©c tr·ª£ gi√∫p ƒë·ªÉ t·∫°o m·ªôt n√∫t menu.
     */
    private JButton createNavItem(String text, String iconText) {
        JButton button = new JButton();

        String htmlText = "<html>" +
                "<span style='font-family:\"Segoe UI Emoji\"; font-size:15pt;'>" +
                iconText +
                "</span>" +
                "&nbsp;&nbsp;&nbsp;" +
                "<span style='font-family:\"Segoe UI\", Arial; font-size: 12pt; font-weight: bold;'>" +
                text.replace(" ", "&nbsp;") +
                "</span>" +
                "</html>";
        button.setText(htmlText);

        button.setForeground(Color.WHITE);
        button.setBackground(PRIMARY_COLOR);
        button.setFocusPainted(false);
        button.setHorizontalAlignment(SwingConstants.LEFT);
        button.setBorderPainted(false);
        button.setOpaque(true);
        button.setBorder(new EmptyBorder(10, 25, 10, 25));

        int fixedHeight = 50;
        Dimension itemSize = new Dimension(Integer.MAX_VALUE, fixedHeight);
        button.setMaximumSize(itemSize);
        button.setPreferredSize(new Dimension(260, fixedHeight));
        button.setMinimumSize(new Dimension(0, fixedHeight));

        final Color originalColor = PRIMARY_COLOR;
        final Color hoverColor = new Color(0, 130, 235); // S√°ng h∆°n m·ªôt ch√∫t

        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (button.getBackground().equals(originalColor)) {
                    button.setBackground(hoverColor);
                }
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                if (button.getBackground().equals(hoverColor)) {
                    button.setBackground(originalColor);
                }
            }
        });
        return button;
    }

    // =================================================================================
    // KHU V·ª∞C N·ªòI DUNG (QU·∫¢N L√ù CHUY·∫æN T√ÄU) - ƒê√É S·ª¨A
    // =================================================================================

    /**
     * T·∫°o panel n·ªôi dung ch√≠nh b√™n ph·∫£i. (Code t·ª´ m√†n h√¨nh ƒë·∫ßu ti√™n)
     */
    private JPanel createContentPanel() {
        JPanel panel = new JPanel(new BorderLayout(15, 15));
        panel.setBackground(BG_COLOR);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15)); // Th√™m padding

        // --- Ti√™u ƒë·ªÅ ---
        JLabel title = new JLabel("Qu·∫£n l√Ω chuy·∫øn t√†u");
        title.setFont(FONT_TITLE);
        title.setHorizontalAlignment(SwingConstants.LEFT);
        panel.add(title, BorderLayout.NORTH);

        // --- Khu v·ª±c ch√≠nh (ch·ª©a form v√† b·∫£ng) ---
        JPanel mainArea = new JPanel();
        mainArea.setLayout(new BoxLayout(mainArea, BoxLayout.Y_AXIS)); // X·∫øp ch·ªìng form v√† b·∫£ng
        mainArea.setOpaque(false); // L√†m trong su·ªët ƒë·ªÉ hi·ªÉn th·ªã m√†u n·ªÅn c·ªßa panel cha

        // 1. Form nh·∫≠p li·ªáu [ƒê√É G·ªåI H√ÄM S·ª¨A]
        JPanel formPanel = createFormPanel();
        mainArea.add(formPanel);

        // Th√™m kho·∫£ng c√°ch gi·ªØa form v√† b·∫£ng
        mainArea.add(Box.createRigidArea(new Dimension(0, 20)));

        // 2. B·∫£ng d·ªØ li·ªáu [ƒê√É G·ªåI H√ÄM S·ª¨A]
        JPanel tablePanel = createTablePanel();
        mainArea.add(tablePanel);

        panel.add(mainArea, BorderLayout.CENTER);

        return panel;
    }

    /**
     * [ƒê√É S·ª¨A] T·∫°o panel ch·ª©a form nh·∫≠p li·ªáu.
     * Thay th·∫ø JTextField b·∫±ng JComboBox, JDateChooser, JSpinner.
     */
    private JPanel createFormPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                new EmptyBorder(10, 10, 10, 10)
        ));

        // S·ª≠ d·ª•ng GridBagLayout ƒë·ªÉ cƒÉn ch·ªânh
        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        fieldsPanel.setBackground(Color.WHITE);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8); // Kho·∫£ng c√°ch gi·ªØa c√°c th√†nh ph·∫ßn
        gbc.anchor = GridBagConstraints.WEST; // CƒÉn l·ªÅ tr√°i
        gbc.fill = GridBagConstraints.HORIZONTAL; // C√°c component co gi√£n theo chi·ªÅu ngang

        // H√†ng 1: M√£ chuy·∫øn t√†u (Gi·ªØ nguy√™n JTextField)
        gbc.gridx = 0; gbc.gridy = 0;
        gbc.fill = GridBagConstraints.NONE; // Label kh√¥ng co gi√£n
        fieldsPanel.add(new JLabel("M√£ chuy·∫øn t√†u:"), gbc);

        gbc.gridx = 1; gbc.gridwidth = 3; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
        fieldsPanel.add(new JTextField(20), gbc);

        // H√†ng 2: M√£ T√†u (Thay JTextField b·∫±ng JComboBox)
        gbc.gridx = 0; gbc.gridy = 1; gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        fieldsPanel.add(new JLabel("M√£ t√†u:"), gbc); // S·ª≠a "T√™n t√†u" -> "M√£ t√†u"

        gbc.gridx = 1; gbc.gridwidth = 3; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 1.0;
        cbMaTau = new JComboBox<>();
        cbMaTau.setFont(FONT_PLAIN_14);
        fieldsPanel.add(cbMaTau, gbc);

        // H√†ng 3: Ga ƒëi v√† Ga ƒë·∫øn (Thay JTextField b·∫±ng JComboBox)
        gbc.gridx = 0; gbc.gridy = 2; gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        fieldsPanel.add(new JLabel("Ga ƒëi:"), gbc);

        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 0.5;
        cbGaDi = new JComboBox<>();
        cbGaDi.setFont(FONT_PLAIN_14);
        fieldsPanel.add(cbGaDi, gbc);

        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0; gbc.insets = new Insets(8, 20, 8, 8); // Th√™m l·ªÅ tr√°i
        fieldsPanel.add(new JLabel("Ga ƒë·∫øn:"), gbc);

        gbc.gridx = 3; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 0.5; gbc.insets = new Insets(8, 8, 8, 8);
        cbGaDen = new JComboBox<>();
        cbGaDen.setFont(FONT_PLAIN_14);
        fieldsPanel.add(cbGaDen, gbc);

        // H√†ng 4: Gi·ªù ƒëi (Thay JTextField b·∫±ng JSpinner)
        gbc.gridx = 0; gbc.gridy = 3;
        gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        fieldsPanel.add(new JLabel("Gi·ªù ƒëi:"), gbc);

        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 0.5;
        // T·∫°o Spinner ch·ªçn gi·ªù
        Date initTime = Calendar.getInstance().getTime();
        SpinnerDateModel timeModel = new SpinnerDateModel(initTime, null, null, Calendar.HOUR_OF_DAY);
        timeSpinnerGioDi = new JSpinner(timeModel);
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(timeSpinnerGioDi, "HH:mm");
        timeSpinnerGioDi.setEditor(timeEditor);
        timeSpinnerGioDi.setFont(FONT_PLAIN_14);
        fieldsPanel.add(timeSpinnerGioDi, gbc);

        // H√†ng 5: Ng√†y ƒëi (Thay JTextField b·∫±ng JDateChooser)
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0;
        fieldsPanel.add(new JLabel("Ng√†y ƒëi:"), gbc);

        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.weightx = 0.5;
        dateChooserNgayDi = new JDateChooser();
        dateChooserNgayDi.setDateFormatString("dd/MM/yyyy");
        dateChooserNgayDi.setFont(FONT_PLAIN_14);
        fieldsPanel.add(dateChooserNgayDi, gbc);


        panel.add(fieldsPanel, BorderLayout.CENTER);

        // --- Panel ch·ª©a c√°c n√∫t b·∫•m (Gi·ªØ nguy√™n) ---
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.add(new JButton("T√¨m"));
        buttonPanel.add(new JButton("Th√™m"));
        buttonPanel.add(new JButton("S·ª≠a"));
        buttonPanel.add(new JButton("Th√™m nhanh b·∫±ng excel"));

        panel.add(buttonPanel, BorderLayout.SOUTH);

        // ƒê·∫∑t k√≠ch th∆∞·ªõc t·ªëi ƒëa ƒë·ªÉ form kh√¥ng b·ªã co gi√£n d·ªçc
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, panel.getPreferredSize().height + 20));

        return panel;
    }

    /**
     * [ƒê√É S·ª¨A] T·∫°o panel ch·ª©a b·∫£ng d·ªØ li·ªáu.
     * S·ª≠a l·∫°i t√™n c·ªôt cho kh·ªõp CSDL (T√™n t√†u -> M√£ t√†u)
     */
    private JPanel createTablePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                new EmptyBorder(5, 5, 5, 5)
        ));

        // --- T·∫°o B·∫£ng ---
        // S·ª≠a "T√™n t√†u" -> "M√£ t√†u"
        String[] columnNames = {"M√£ chuy·∫øn t√†u", "M√£ t√†u", "Ga ƒëi", "Ga ƒë·∫øn", "Gi·ªù ƒëi", "Ng√†y ƒëi"};
        Object[][] data = {}; // D·ªØ li·ªáu tr·ªëng

        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        JTable table = new JTable(model);

        table.setFillsViewportHeight(true);
        table.setRowHeight(28);
        table.setFont(FONT_PLAIN_14); // S·ª≠ d·ª•ng FONT_PLAIN_14

        table.getTableHeader().setFont(FONT_BOLD_14); // S·ª≠ d·ª•ng FONT_BOLD_14
        table.getTableHeader().setBackground(new Color(230, 230, 230));

        JScrollPane scrollPane = new JScrollPane(table);
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    // =================================================================================
    // KHU V·ª∞C TRUY V·∫§N CSDL (M·ªöI)
    // =================================================================================

    /**
     * [M·ªöI] T·∫£i danh s√°ch M√£ T√†u t·ª´ CSDL l√™n JComboBox
     */
    private void loadDuLieuMaTau() throws SQLException {
        Connection conn = ConnectDB.getConnection();
        String sql = "SELECT MaTau FROM Tau";
        try (PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) cbMaTau.getModel();
            model.removeAllElements(); // X√≥a d·ªØ li·ªáu c≈©

            while (rs.next()) {
                model.addElement(rs.getString("MaTau"));
            }
        }
        // L∆∞u √Ω: Kh√¥ng ƒë√≥ng k·∫øt n·ªëi ·ªü ƒë√¢y, ƒë·ªÉ cho c√°c h√†m kh√°c c√≤n d√πng
        // ConnectDB.disconnect(); // KH√îNG N√äN
    }

    /**
     * [M·ªöI] T·∫£i danh s√°ch T√™n Ga t·ª´ CSDL l√™n 2 JComboBox
     */
    private void loadDuLieuGa() throws SQLException {
        Connection conn = ConnectDB.getConnection();
        String sql = "SELECT TenGa FROM Ga";
        try (PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            DefaultComboBoxModel<String> modelGaDi = (DefaultComboBoxModel<String>) cbGaDi.getModel();
            DefaultComboBoxModel<String> modelGaDen = (DefaultComboBoxModel<String>) cbGaDen.getModel();
            modelGaDi.removeAllElements();
            modelGaDen.removeAllElements();

            while (rs.next()) {
                String tenGa = rs.getString("TenGa");
                modelGaDi.addElement(tenGa);
                modelGaDen.addElement(tenGa);
            }
        }
    }


    /**
     * Ph∆∞∆°ng th·ª©c main ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng.
     */
    public static void main(String[] args) {
        // [M·ªöI] K·∫øt n·ªëi CSDL ngay khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
        try {
            ConnectDB.getInstance().connect();
            System.out.println("K·∫øt n·ªëi CSDL th√†nh c√¥ng!");
        } catch (Exception e) {
            System.err.println("L·ªói k·∫øt n·ªëi CSDL!");
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn CSDL. Vui l√≤ng ki·ªÉm tra l·∫°i.", "L·ªói k·∫øt n·ªëi", JOptionPane.ERROR_MESSAGE);
            return; // D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
        }


        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // D√πng giao di·ªán m·∫∑c ƒë·ªãnh
        }

        SwingUtilities.invokeLater(() -> {
            ManhinhQuanLyChuyenTau frame = new ManhinhQuanLyChuyenTau();
            frame.setVisible(true);
        });
    }
}