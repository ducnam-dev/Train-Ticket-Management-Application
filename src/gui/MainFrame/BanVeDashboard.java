package gui.MainFrame;

// Import c√°c Panel c·∫ßn hi·ªÉn th·ªã (Gi·∫£ ƒë·ªãnh c√°c l·ªõp n√†y k·∫ø th·ª´a t·ª´ JPanel)
import gui.Panel.ManHinhBanVe;
//import gui.Panel.ManHinhTraCuuVe;
import gui.Panel.ManHinhTraCuuHoaDon;
import gui.Panel.ManHinhTrangChuNVBanVe; // Trang ch·ªß cho NV B√°n v√©
import gui.Panel.ManHinhMoCa;
import gui.Panel.ManHinhKetCa;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;

/**
 * L·ªõp n√†y t·∫°o MainFrame cho quy·ªÅn Nh√¢n vi√™n B√°n V√©, ch·ª©a Menu c·ªë ƒë·ªãnh v√† CardLayout.
 */
public class BanVeDashboard extends JFrame implements ActionListener {

    // =================================================================================
    // H·∫∞NG S·ªê V√Ä KHAI B√ÅO
    // =================================================================================
    private CardLayout cardLayout;
    private JPanel contentPanel;
    private final Color PRIMARY_COLOR = new Color(34, 137, 203); // M√†u xanh ƒë·∫≠m h∆°n cho NV B√°n v√©
    private final Color SELECTED_COLOR = new Color(74, 184, 237); // M√†u xanh s√°ng h∆°n
    private final Color HOVER_COLOR = new Color(45, 150, 215);
    private final Map<String, JButton> menuButtons = new HashMap<>();

    // C√°c n√∫t menu c·∫ßn qu·∫£n l√Ω
    private JButton btnTrangChu, btnMoCa, btnKetCa, btnBanVe, btnDoiVe, btnTraCuuVe, btnTraCuuHD, btnDangXuat;

    public BanVeDashboard() {
        setTitle("H·ªá th·ªëng B√°n V√© T√†u - Nh√¢n vi√™n B√°n V√©");
        setSize(1200, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // 1. Panel Menu b√™n tr√°i
        JPanel navPanel = createNavPanel();
        add(navPanel, BorderLayout.WEST);

        // 2. Panel n·ªôi dung (CardLayout)
        initContentPanel();

        switchToCard("trangChuNV");

        initEventHandlers();

        setVisible(true);
    }

    // =================================================================================
    // KHU V·ª∞C MENU (NH√ÇN VI√äN B√ÅN V√â)
    // =================================================================================

    /**
     * T·∫°o panel ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i cho Nh√¢n vi√™n B√°n V√©.
     */
    private JPanel createNavPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(PRIMARY_COLOR);
        panel.setPreferredSize(new Dimension(220, 0)); // Chi·ªÅu r·ªông h·∫πp h∆°n
        panel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // --- Ph·∫ßn Header (Logo v√† ID) ---
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setBackground(PRIMARY_COLOR);
        headerPanel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel logoLabel = new JLabel("GA XE");
        logoLabel.setFont(new Font("Segoe UI", Font.BOLD, 36));
        logoLabel.setForeground(Color.WHITE);
        logoLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel idLabel = new JLabel("NV B√ÅN V√â");
        idLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        idLabel.setForeground(Color.WHITE);
        idLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        idLabel.setBorder(new EmptyBorder(5, 5, 20, 0));

        headerPanel.add(logoLabel);
        headerPanel.add(idLabel);
        headerPanel.setMaximumSize(headerPanel.getPreferredSize());
        panel.add(headerPanel);

        // --- Ph·∫ßn c√°c m·ª•c menu ---

        // [1. Trang ch·ªß]
        btnTrangChu = createNavItem("Trang ch·ªß", "\uD83C\uDFE0", "trangChuNV"); // üè†
        panel.add(btnTrangChu);

        // [2. M·ªü ca]
        btnMoCa = createNavItem("M·ªü ca", "\u23F3", "moCa"); // ‚è≥
        panel.add(btnMoCa);

        // [3. K·∫øt ca]
        btnKetCa = createNavItem("K·∫øt ca", "\u23F0", "ketCa"); // ‚è±Ô∏è
        panel.add(btnKetCa);

        // --- Separator ---
        panel.add(createSeparator());

        // [4. B√°n v√© m·ªõi]
        btnBanVe = createNavItem("B√°n v√© m·ªõi", "\uD83C", "banVeMoi"); // üé´
        panel.add(btnBanVe);

        // [5. ƒê·ªïi v√©]
        btnDoiVe = createNavItem("ƒê·ªïi v√©", "\u21C4", "doiVe"); // ‚áÑ
        panel.add(btnDoiVe);

        // --- Separator ---
        panel.add(createSeparator());

        // [6. Tra c·ª©u v√©]
        btnTraCuuVe = createNavItem("Tra c·ª©u v√©", "\uD83D\uDD0D", "traCuuVe"); // üîç
        panel.add(btnTraCuuVe);

        // [7. Tra c·ª©u h√≥a ƒë∆°n]
        btnTraCuuHD = createNavItem("Tra c·ª©u h√≥a ƒë∆°n", "\uD83D\uDCCB", "traCuuHD"); // üìã
        panel.add(btnTraCuuHD);


        panel.add(Box.createVerticalGlue());

        // --- N√∫t ƒêƒÉng xu·∫•t ---
        btnDangXuat = createNavItem("ƒêƒÉng xu·∫•t", "\uD83D\uDEAA", "dangXuat"); // üö™
        panel.add(btnDangXuat);

        return panel;
    }

    /**
     * Ph∆∞∆°ng th·ª©c t·∫°o n√∫t menu
     */
    private JButton createNavItem(String text, String iconText, String cardName) {
        JButton button = new JButton(text);

        String htmlText = "<html>" +
                "<span style='font-family:\"Segoe UI Emoji\"; font-size:15pt;'>" + iconText + "</span>" +
                "&nbsp;&nbsp;&nbsp;" +
                "<span style='font-family:\"Segoe UI\", Arial; font-size: 12pt; font-weight: bold;'>" + text + "</span>" +
                "</html>";
        button.setText(htmlText);

        button.setForeground(Color.WHITE);
        button.setBackground(PRIMARY_COLOR);
        button.setFocusPainted(false);
        button.setHorizontalAlignment(SwingConstants.LEFT);
        button.setBorder(new EmptyBorder(10, 15, 10, 15)); // CƒÉn l·ªÅ tr√°i h·ª£p l√Ω
        button.setOpaque(true);

        int fixedHeight = 45;
        Dimension itemSize = new Dimension(Integer.MAX_VALUE, fixedHeight);
        button.setMaximumSize(itemSize);

        // ƒêƒÉng k√Ω n√∫t v√†o Map v√† Listener
        menuButtons.put(cardName, button);

        // X·ª≠ l√Ω hi·ªáu ·ª©ng hover/m√†u s·∫Øc
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (button.getBackground().equals(PRIMARY_COLOR)) {
                    button.setBackground(HOVER_COLOR);
                }
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                if (button.getBackground().equals(HOVER_COLOR)) {
                    button.setBackground(PRIMARY_COLOR);
                }
            }
        });
        return button;
    }

    /**
     * T·∫°o Separator gi·ªØa c√°c nh√≥m ch·ª©c nƒÉng
     */
    private JSeparator createSeparator() {
        JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);
        separator.setForeground(new Color(255, 255, 255, 70));
        separator.setBackground(PRIMARY_COLOR);
        separator.setMaximumSize(new Dimension(Integer.MAX_VALUE, 1));
        return separator;
    }


    // =================================================================================
    // KHU V·ª∞C CONTENT PANEL & CARDLAYOUT
    // =================================================================================

    /**
     * Kh·ªüi t·∫°o Panel ch·ª©a CardLayout v√† th√™m c√°c m√†n h√¨nh
     */
    private void initContentPanel() {
        cardLayout = new CardLayout();
        contentPanel = new JPanel(cardLayout);

        // Th√™m c√°c m√†n h√¨nh (Gi·∫£ ƒë·ªãnh t·∫•t c·∫£ ƒë·ªÅu l√† JPanel)
        contentPanel.add(new ManHinhTrangChuNVBanVe(), "trangChuNV");
        contentPanel.add(new ManHinhMoCa(), "moCa");
        contentPanel.add(new ManHinhKetCa(), "ketCa");
        contentPanel.add(new ManHinhBanVe(), "banVeMoi");
        contentPanel.add(new JPanel(), "doiVe"); // Placeholder
        contentPanel.add(new JPanel(), "traCuuVe");
        contentPanel.add(new ManHinhTraCuuHoaDon(), "traCuuHD");


        add(contentPanel, BorderLayout.CENTER);
    }

    /**
     * Thi·∫øt l·∫≠p Action Listener cho t·∫•t c·∫£ c√°c n√∫t menu
     */
    private void initEventHandlers() {
        for (JButton button : menuButtons.values()) {
            button.addActionListener(this);
        }
    }

    /**
     * Chuy·ªÉn ƒë·ªïi m√†n h√¨nh trong CardLayout v√† highlight n√∫t menu t∆∞∆°ng ·ª©ng
     */
    public void switchToCard(String cardName) {
        cardLayout.show(contentPanel, cardName);
        highlightActiveButton(menuButtons.get(cardName));
    }

    /**
     * ƒê·ªïi m√†u n·ªÅn c·ªßa n√∫t menu ƒëang ƒë∆∞·ª£c ch·ªçn
     */
    private void highlightActiveButton(JButton active) {
        // ƒê·∫∑t t·∫•t c·∫£ c√°c n√∫t v·ªÅ m√†u ban ƒë·∫ßu
        for (JButton button : menuButtons.values()) {
            if (button != null) {
                button.setBackground(PRIMARY_COLOR);
            }
        }
        // Highlight n√∫t ƒëang ho·∫°t ƒë·ªông
        if (active != null) {
            active.setBackground(SELECTED_COLOR);
        }
    }

    /**
     * Th√™m ho·∫∑c c·∫≠p nh·∫≠t m·ªôt JPanel v√†o CardLayout.
     * Ph∆∞∆°ng th·ª©c n√†y gi√∫p th√™m c√°c panel ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi d·ªØ li·ªáu ƒë·ªông.
     * * @param newPanel Panel m·ªõi c·∫ßn th√™m.
     * @param cardName T√™n card (String) t∆∞∆°ng ·ª©ng.
     */
    public void addOrUpdateCard(JPanel newPanel, String cardName) {
        // 1. T√¨m v√† x√≥a panel c≈© d·ª±a tr√™n t√™n card
        // Note: V√¨ CardLayout kh√¥ng c√≥ getConstraints() c√¥ng khai,
        // ta ph·∫£i x√≥a panel c≈© b·∫±ng c√°ch duy·ªát qua t·∫•t c·∫£ v√† s·ª≠ d·ª•ng remove().

        // T·∫°o m·ªôt Component ƒë·ªÉ gi·ªØ tham chi·∫øu ƒë·∫øn panel c≈© c·∫ßn x√≥a
        Component oldComponent = null;

        // Duy·ªát qua t·∫•t c·∫£ c√°c Component trong contentPanel
        for (Component comp : contentPanel.getComponents()) {
            if (comp.getName() != null && comp.getName().equals(cardName)) {
                oldComponent = comp;
                break;
            }
        }

        // N·∫øu t√¨m th·∫•y component c≈©, h√£y x√≥a n√≥
        if (oldComponent != null) {
            contentPanel.remove(oldComponent);
        }

        // 2. Th√™m panel m·ªõi
        // ƒê·∫∑t t√™n cho component m·ªõi, gi√∫p vi·ªác t√¨m ki·∫øm/x√≥a sau n√†y d·ªÖ d√†ng h∆°n
        newPanel.setName(cardName);
        contentPanel.add(newPanel, cardName);

        // 3. C·∫≠p nh·∫≠t giao di·ªán
        contentPanel.revalidate();
        contentPanel.repaint();
    }



    // =================================================================================
    // X·ª¨ L√ù S·ª∞ KI·ªÜN CHUNG
    // =================================================================================
    @Override
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();

        // T√¨m t√™n card t∆∞∆°ng ·ª©ng v·ªõi n√∫t ƒë∆∞·ª£c click
        String cardName = menuButtons.entrySet().stream()
                .filter(entry -> entry.getValue() == src)
                .map(Map.Entry::getKey)
                .findFirst()
                .orElse(null);

        if ("dangXuat".equals(cardName)) {
            int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?", "X√°c nh·∫≠n ƒëƒÉng xu·∫•t", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                this.dispose();
            }
            return;
        }

        if (cardName != null) {
            switchToCard(cardName);
        }
    }

    // =================================================================================
    // MAIN
    // =================================================================================
    public static void main(String[] args) {
        try {
            // Thi·∫øt l·∫≠p Look and Feel
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }
        SwingUtilities.invokeLater(() -> {
            new BanVeDashboard();
        });
    }
}